<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="prgFileRead" Id="{4857e5f2-30bc-4b3f-a8e6-29440eed8349}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM prgFileRead
VAR
	sNetId			: T_AmsNetId := '';	(* TwinCAT system network address *)
	sCSVLine		: T_MaxString := '';(* Single CSV text line (row, record), we are using string as record buffer (your are able to see read fields)  *)
	sCSVField		: T_MaxString := '';(* Single CSV field value (column, record field) *)
	bBusy			: BOOL;
	bError			: BOOL;
	nErrId			: UDINT;
	nRow	 		: UDINT 	:= 0;(* Row number (record) *)
	nColumn			: UDINT 	:= 0;(* Column number (record field) *)
	hFile			: UINT		:= 0;(* File handle of the source file *)
	step			: DWORD 	:= 0;
	fbFileOpen		: FB_FileOpen;(* Opens file *)
	fbFileClose		: FB_FileClose;(* Closes file *)
	fbFileGets		: FB_FileGets;(* Reads one record (line) *)
	fbReader		: FB_CSVMemBufferReader;(* Helper function block used to parse CSV data bytes (single record line) *)

	i: UDINT;
	readTrig:R_TRIG;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE step OF
	0:
		readTrig(CLK:=GVL.readFileNow);
		IF readTrig.Q THEN
			GVL.readFileNow 	:= FALSE;
			bBusy 	:= TRUE;
			bError	:= FALSE;
			nErrId	:= 0;
			hFile	:= 0;
			nRow	:= 1;
			nColumn	:= 0;
			step 		:= 1;
			FOR i:=1 TO GVL.MAX_CSV_ROWS DO
				GVL.readData[i]:=GVL.emptyData;
			END_FOR
		END_IF
	1:
		fbFileOpen(  bExecute := FALSE  );
		fbFileOpen( sNetId := sNetId, sPathName := GVL.sFileName, nMode := FOPEN_MODEREAD OR FOPEN_MODETEXT,(* Open file in TEXT mode! *)
					ePath := PATH_GENERIC, bExecute := TRUE );
		step := 2;
	2:
		fbFileOpen( bExecute := FALSE, bError => bError, nErrID => nErrID, hFile => hFile );
		IF NOT fbFileOpen.bBusy THEN
			IF NOT fbFileOpen.bError THEN
				step := 3;
			ELSE(* Error: file not found? *)
				step := 100;
			END_IF
		END_IF
	3:
		fbFileGets( bExecute := FALSE );
		fbFileGets( sNetId := sNetId, hFile := hFile, bExecute := TRUE );
		step := 4;
	4:
		fbFileGets( bExecute := FALSE, bError => bError, nErrID => nErrID, sLine => sCSVLine );
		IF NOT fbFileGets.bBusy THEN
			IF NOT fbFileGets.bError THEN
				IF fbFileGets.bEOF THEN
					step := 10;(* End of file reached => Close source file *)
				ELSE

					(* FB_FileGets returns text line without the CR (carriage return) character.
					We have to restore the CR character (replace the $L character with $R$L characters) *)
					IF RIGHT( sCSVLine, 1 ) = '$L' THEN
						sCSVLine := REPLACE( sCSVLine, '$R$L', 2, LEN(sCSVLine));
					END_IF

					step := 5;
				END_IF
			ELSE(* Error *)
				step := 100;
			END_IF
		END_IF
	5:
		fbReader.eCmd := eEnumCmd_First;(* Read first field value *)
		REPEAT
			fbReader( pBuffer := ADR( sCSVLine ), cbBuffer := SIZEOF( sCSVLine ), getValue => sCSVField );
			IF fbReader.bOk THEN
				fbReader.eCmd := eEnumCmd_Next;(* Read next field value *)

				CASE nColumn OF
					0:
						GVL.readData[nRow].field01:=  CSVFIELD_TO_STRING( sCSVField, FALSE );
					1:
						GVL.readData[nRow].field02:=  CSVFIELD_TO_STRING( sCSVField, FALSE );
					2:
						GVL.readData[nRow].field03:=  CSVFIELD_TO_STRING( sCSVField, FALSE );
					3:
						GVL.readData[nRow].field04:=  CSVFIELD_TO_STRING( sCSVField, FALSE );
					4:
						GVL.readData[nRow].field05:=  CSVFIELD_TO_STRING( sCSVField, FALSE );
				END_CASE

				nColumn := nColumn + 1;(* Increment number of read columns *)
				IF fbReader.bCRLF THEN(* CRLF == TRUE => End of reacord reached *)
					nRow 		:= nRow + 1;(* Increment number of read records *)
					nColumn 	:= 0;(* Reset number of columns *)
				END_IF

			ELSE(* Error: End of record reached or all fields read *)
				step := 3;(* Try to read next line *)
			END_IF
		UNTIL NOT fbReader.bOk
		END_REPEAT
	10:	(* Close source file *)
		fbFileClose( bExecute := FALSE );
		fbFileClose( sNetId := sNetId, hFile := hFile, bExecute := TRUE );
		step := 11;

	11:(* Wait until close not busy *)
		fbFileClose( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF ( NOT fbFileClose.bBusy ) THEN
			hFile := 0;
			step := 100;
		END_IF

	100: (* Error or ready step => cleanup *)
		IF ( hFile <> 0 ) THEN
			step := 10; (* Close the source file *)
		ELSE
			bBusy := FALSE;
			step := 0;	(* Ready *)
		END_IF	
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="prgFileRead">
      <LineId Id="26" Count="64" />
      <LineId Id="126" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="130" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="94" Count="31" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>